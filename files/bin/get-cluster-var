#!/bin/bash
#
# Retrieves a cluster variable from locally cached files created by
# update-v3-cluster-cache or update-v4-cluster-cache.
#
# For v3 clusters, this command is generally not called directly, but
# through one of the "oo" commands (oo_account, oo_environment, etc).
#
#   get-cluster-var CLUSTERID [VARNAME]
#
# The program can also be used as a silent validity test for a CLUSTERID
# by omitting the VARNAME argument, although this only really indicates
# whether a locally cached file exists for it.
#

set -euo pipefail

XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}

CLUSTER=$1
VARNAME=$2
if [[ -z $CLUSTER ]]
then
    echo "Usage: $0 <clusterid> [<varname>]" > /dev/stderr
    exit 1
fi

if [[ "${CLUSTER:0:3}" =~ ^v[34]: ]]
then
  VERSION=${CLUSTER:0:2}
  CLUSTER=${CLUSTER:3}
fi

V3_CACHE_FILE="$XDG_CACHE_HOME/sre/clusters/v3/$CLUSTER"
V4_FOUND_FILE=$(find $XDG_CACHE_HOME/ocm -name "$CLUSTER" | head --lines=1)
if [[ -n "$V4_FOUND_FILE" ]]
then
  V4_CACHE_FILE=$(realpath "$V4_FOUND_FILE")
else
  V4_CACHE_FILE=
fi
if [[ "${VERSION:-v3}" == "v3" ]] && [[ -f $V3_CACHE_FILE ]]
then
  if [[ -n $VARNAME ]]
  then
    jq --raw-output ".$VARNAME" $V3_CACHE_FILE
  fi
elif [[ "${VERSION:-v4}" == "v4" ]] && [[ -f $V4_CACHE_FILE ]]
then
  if [[ -n $VARNAME ]]
  then
    jq --raw-output ".$VARNAME" $V4_CACHE_FILE
  fi
else
  echo "Unknown cluster '$CLUSTER'" > /dev/stderr
  exit 1
fi
