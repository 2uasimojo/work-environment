#!/usr/bin/python

import argparse
import errno
import json
import os
import shutil
import subprocess
import sys
import tempfile

try:
    from shutil import which
except ImportError:
    # Simplified shutil.which from Python 3
    def which(cmd):
        # Check that a given file can be accessed with the correct mode.
        def _access_check(fn):
            mode = os.F_OK | os.X_OK
            return os.path.exists(fn) and os.access(fn, mode)

        # If we're given a path with a directory part, look it up directly rather
        # then referring to PATH directories. This includes checking relative to the
        # current directory, e.g. ./script
        if os.path.dirname(cmd):
            if _access_check(cmd):
                return cmd
            return None

        path = os.environ.get("PATH", os.defpath).split(os.pathsep)
        files = [cmd]

        seen = set()
        for dir in path:
            normdir = os.path.normcase(dir)
            if not normdir in seen:
                seen.add(normdir)
                for thefile in files:
                    name = os.path.join(dir, thefile)
                    if _access_check(name):
                        return name
        return None


CACHE_DIR = '~/.cache/sre/clusters'
CONFIG_DIR = '~/.config/sre/clusters/v4'
CLUSTERS_API_PATH = '/api/clusters_mgmt/v1/clusters'
OCM_COMMAND_DEFAULT = which('ocm')

def safe_mkdir(path, mode=0777):
    try:
        os.makedirs(path, mode)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def get_managed_clusters(ocm_command):
    page=1
    items=[]

    # Update total after we get the first result.
    # This just ensures we make at least one pass.
    total=sys.maxsize

    while len(items) < total:
        ocm_output = subprocess.check_output([
            ocm_command, 'get', CLUSTERS_API_PATH,
            '--parameter=search=managed=\'true\'',
            '--parameter=page=%d' % page])
        json_result = json.loads(ocm_output)
        total = json_result['total']
        items.extend(json_result['items'])
        page += 1

    # v4 clusters are identified by an alphanumeric ID and can
    # have identical names. Disambiguate such cases by tacking
    # on the router shard from the base domain.
    clusters_by_name = {}
    managed_clusters = {}
    for cluster in items:
        clusters_by_name.setdefault(cluster['name'], []).append(cluster)
    for cluster_name, cluster_list in clusters_by_name.items():
        if len(cluster_list) == 1:
            managed_clusters[cluster_name] = cluster_list[0]
        else:
            for cluster in cluster_list:
                router_shard = cluster['dns']['base_domain'].split('.')[0]
                cluster_name_shard = cluster_name + '.' + router_shard
                managed_clusters[cluster_name_shard] = cluster

    return managed_clusters


def main(args):
    managed_clusters = get_managed_clusters(args.ocm_command)

    # Replace the cache directory
    cache_basedir = os.path.expanduser(CACHE_DIR)
    safe_mkdir(cache_basedir)
    tempdir = tempfile.mkdtemp(dir=cache_basedir)
    os.chdir(tempdir)  # for relative symlinks
    for cluster_name, cluster_data in managed_clusters.items():
        filename = os.path.join(tempdir, cluster_name)
        with open(filename, 'w') as cache_file:
            content = json.dumps(cluster_data, indent=2)
            cache_file.write(content + '\n')
        if 'external_id' in cluster_data:
            os.symlink(cluster_name, cluster_data['external_id'])
    cache_fulldir = os.path.join(cache_basedir, 'v4')
    if os.path.isdir(cache_fulldir):
        shutil.rmtree(cache_fulldir)
    os.rename(tempdir, cache_fulldir)

    # Clean up the config directory
    config_basedir = os.path.expanduser(CONFIG_DIR)
    safe_mkdir(config_basedir)
    for dirpath, dirnames, filenames in os.walk(config_basedir):
        for cluster_name in filenames:
            if cluster_name not in managed_clusters:
                os.unlink(os.path.join(dirpath, cluster_name))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--ocm-command', metavar='PATH',
        default=OCM_COMMAND_DEFAULT,
        help='path to "ocm" command (default: {})'.format(OCM_COMMAND_DEFAULT))
    args = parser.parse_args()

    main(args)
