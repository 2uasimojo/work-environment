#!/bin/bash

if [[ -n $1 ]]
then
  export CLUSTERID=$1
fi

if [[ "${CLUSTERID:0:3}" =~ ^v[34]: ]]
then
  VERSION=${CLUSTERID:0:2}
  CLUSTERID=${CLUSTERID:3}
fi

if [[ -z "$CLUSTERID" ]]
then
  echo "Usage: source cluster <clusterid>" > /dev/stderr
else
  # Unset any previous cluster variables.
  unset KUBECONFIG
  unset AWS_PROFILE
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_DEFAULT_REGION

  case "$CLUSTERID" in
    # Special name to reset the environment.
    none)
      unset CLUSTERID
      ;;
    # Special handling for v3 test clusters.
    mbarnestest*)
      VERSION=v3
      export AWS_PROFILE="opstest"
      export AWS_DEFAULT_REGION="us-east-2"
      ;;
    *)
      V3_CACHE_FILE=$(realpath --canonicalize-missing $HOME/.cache/sre/clusters/v3/$CLUSTERID)
      V4_CACHE_FILE=$(realpath --canonicalize-missing $HOME/.cache/sre/clusters/v4/$CLUSTERID)
      V4_CONFIG_DIR="$HOME/.config/sre/clusters/v4"

      if [[ -z "$VERSION" ]] && [[ -f "$V3_CACHE_FILE" ]] && [[ -f "$V4_CACHE_FILE" ]]
      then
        CLUSTERID=$(basename $V3_CACHE_FILE)
        echo "Please specify v3:$CLUSTERID or v4:$CLUSTERID" > /dev/stderr
      elif [[ "${VERSION:-v3}" == "v3" ]] && [[ -f "$V3_CACHE_FILE" ]]
      then
        VERSION=v3
        CLUSTERID=$(basename $V3_CACHE_FILE)
        export AWS_PROFILE=$(oo_account $CLUSTERID)
        export AWS_DEFAULT_REGION=$(oo_sublocation $CLUSTERID)
      elif [[ "${VERSION:-v4}" == "v4" ]] && [[ -f "$V4_CACHE_FILE" ]]
      then
        VERSION=v4
        mkdir -p "$V4_CONFIG_DIR"
        CLUSTERID=$(basename $V4_CACHE_FILE)
        export KUBECONFIG="$V4_CONFIG_DIR/$CLUSTERID"
        export OCM_CLUSTERID=$(get-cluster-var v4:$CLUSTERID id)
        export AWS_DEFAULT_REGION=$(get-cluster-var v4:$CLUSTERID region.id)
        API_LISTENING=$(get-cluster-var $CLUSTERID api.listening)
        if [[ -f "$KUBECONFIG" ]] && [[ "$API_LISTENING" != "internal" ]]
        then
          # See https://github.com/openshift/ops-sop/blob/master/v4/howto/aws.md
          export AWS_ACCESS_KEY_ID=$(oc get secrets -n kube-system aws-creds -o json | jq -r '.data.aws_access_key_id' | base64 -d)
          export AWS_SECRET_ACCESS_KEY=$(oc get secrets -n kube-system aws-creds -o json | jq -r '.data.aws_secret_access_key' | base64 -d)
        fi
      else
        echo "Unknown cluster '$CLUSTERID'" > /dev/stderr
      fi
      ;;
  esac

  if [[ -n "$AWS_PROFILE" ]]
  then
    echo "         CLUSTERID : $CLUSTERID"
    echo "       AWS_PROFILE : $AWS_PROFILE"
    echo "AWS_DEFAULT_REGION : $AWS_DEFAULT_REGION"
  elif [[ -n "$KUBECONFIG" ]]
  then
    echo "         CLUSTERID : $CLUSTERID"
    echo "     OCM_CLUSTERID : $OCM_CLUSTERID"
    echo "AWS_DEFAULT_REGION : $AWS_DEFAULT_REGION"

    if [[ "$API_LISTENING" == "internal" ]]
    then
      echo
      case $(hostname) in
        bastion-*.ops.openshift.com)
          echo "API service is internal (use 'sshproxy')"
          ;;
        *)
          echo "API service is internal (use 'sshproxy' or 'ocm tunnel')"
          ;;
      esac
    fi

    if [[ ! -f "$KUBECONFIG" ]]
    then
      echo
      echo "Run \"console\" to obtain a login token."
    fi
  fi
fi

TMUX_CLUSTER_FILE=$(tmux-cluster-file)
if [[ -n "$TMUX_CLUSTER_FILE" ]]
then
  if [[ -n "$VERSION" ]] && [[ -n "$CLUSTERID" ]]
  then
    if [[ -d $(dirname $TMUX_CLUSTER_FILE) ]]
    then
        echo "export CLUSTERID=$CLUSTERID" > $TMUX_CLUSTER_FILE
        echo "export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION" >> $TMUX_CLUSTER_FILE
        if [[ -n "$AWS_PROFILE" ]]
        then
            echo "export AWS_PROFILE=$AWS_PROFILE" >> $TMUX_CLUSTER_FILE
        fi
        if [[ -n "$AWS_ACCESS_KEY_ID" ]]
        then
            echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $TMUX_CLUSTER_FILE
        fi
        if [[ -n "$AWS_SECRET_ACCESS_KEY" ]]
        then
            echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $TMUX_CLUSTER_FILE
        fi
        if [[ -n "$KUBECONFIG" ]]
        then
            echo "export KUBECONFIG=$KUBECONFIG" >> $TMUX_CLUSTER_FILE
        fi
        if [[ -n "$OCM_CLUSTERID" ]]
        then
            echo "export OCM_CLUSTERID=$OCM_CLUSTERID" >> $TMUX_CLUSTER_FILE
        fi
    fi
    tmux rename-window "$VERSION:$CLUSTERID"
  else
    rm --force $TMUX_CLUSTER_FILE
    tmux rename-window ""
  fi
fi

unset VERSION
