#!/usr/bin/ansible-playbook
---
#
# Customize a shell environment for OpenShift operations work.
#
# Intended for Red Hat owned AWS EC2 instances serving as "bastion" hosts.
#
- hosts: all
  vars:
    # Use this for blockinfile tasks
    blockinfile_marker: "# (work-environment) {mark} ANSIBLE MANAGED BLOCK"
    ocm_config_dir: "{{ ansible_user_dir }}/.config/ocm"
    virtualenv_root: "{{ ansible_user_dir }}/env"
  tasks:

  - name: Synchronize bin directory
    synchronize:
      src: bin/
      dest: "{{ ansible_user_dir }}/{{ bindir }}/"
      links: yes

  - name: Synchronize v3/bin directory
    synchronize:
      src: v3/bin/
      dest: "{{ ansible_user_dir }}/{{ bindir }}/"
      links: yes
    when: install_v3_files is defined

  # Cached cluster information

  - name: Copy tmux hook script
    copy:
      src: tmux.hooks
      dest: "{{ ansible_user_dir }}/.cache/sre/"

  - name: Create cluster cache directories
    file:
      path: "{{ ansible_user_dir }}/.cache/sre/clusters/{{ item }}"
      state: directory
    when: item == 'v4' or install_v3_files is defined
    with_items:
    - v3
    - v4

  - name: Create user directories
    file:
      path: "{{ ansible_user_dir }}/{{ item }}"
      state: directory
    loop:
    - "{{ bash_aliases_d }}"
    - "{{ bash_profile_d }}"
    - "{{ bash_completion_d }}"

  - name: Edit .bashrc script
    blockinfile:
      path: "{{ ansible_user_dir }}/.bashrc"
      block: "{{ lookup('template', 'bashrc.j2') }}"
      marker: "{{ blockinfile_marker }}"

  - name: Edit profile script
    blockinfile:
      path: "{{ ansible_user_dir }}/{{ profile }}"
      block: "{{ lookup('template', 'profile.j2') }}"
      marker: "{{ blockinfile_marker }}"

  - name: Edit bash_completion script
    blockinfile:
      path: "{{ ansible_user_dir }}/.config/bash_completion"
      block: "{{ lookup('template', 'bash_completion.j2') }}"
      marker: "{{ blockinfile_marker }}"
      create: yes

  - name: Synchronize bash_aliases directory
    synchronize:
      src: bash_aliases/
      dest: "{{ ansible_user_dir }}/{{ bash_aliases_d }}/"

  - name: Synchronize bash_profile directory
    synchronize:
      src: bash_profile/
      dest: "{{ ansible_user_dir }}/{{ bash_profile_d }}/"

  - name: Synchronize bash_completion directory
    synchronize:
      src: bash_completion/
      dest: "{{ ansible_user_dir }}/{{ bash_completion_d }}/"

  - name: Override PATH in crontab
    cron:
      env: yes
      name: PATH
      value: "{{ ansible_user_dir }}/{{ bindir }}:/usr/bin:/bin"

  - name: Schedule daily cluster cache update
    cron:
      name: "Daily {{ item }} cluster cache update"
      special_time: daily
      user: "{{ ansible_user_id }}"
      job: "update-{{ item }}-cluster-cache"
    when: item == 'v4' or install_v3_files is defined
    with_items:
    - v3
    - v4

  - name: Edit SSH configuration
    blockinfile:
      path: "{{ ansible_user_dir }}/.ssh/config"
      block: "{{ lookup('template', 'ssh_config.j2') }}"
      marker: "{{ blockinfile_marker }}"
      create: yes
    when: "'bastions' not in group_names"

  # Install OpenShift client tools

  - name: Download OpenShift v4 client
    unarchive:
      remote_src: yes
      src: https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
      dest: "{{ ansible_user_dir }}/{{ bindir }}"

  - name: Generate bash completion code for OpenShift v4 client
    shell:
      cmd: "{{ ansible_user_dir }}/{{ bindir }}/oc completion bash > {{ ansible_user_dir }}/{{ bash_completion_d }}/oc"

  - name: Look up latest OpenShift Cluster Manager release
    uri:
      url: https://api.github.com/repos/openshift-online/ocm-cli/releases/latest
    register: ocm_release_latest

  - name: Determine OpenShift Cluster Manager download URL
    set_fact:
      ocm_download_url: "{{ item.browser_download_url }}"
    when: item.name == "ocm-linux-amd64"
    loop: "{{ ocm_release_latest.json.assets }}"

  - name: Download OpenShift Cluster Manager client
    get_url:
      url: "{{ ocm_download_url }}"
      dest: "{{ ansible_user_dir }}/{{ bindir }}/ocm"
      mode: u=rwx,g=rx,o=rx

  - name: Generate bash completion code for OpenShift Cluster Manager client
    shell:
      cmd: "{{ ansible_user_dir }}/{{ bindir }}/ocm completion bash > {{ ansible_user_dir }}/{{ bash_completion_d }}/ocm"

  # OpenShift Cluster Manager client configuration

  - name: Create OpenShift Cluster Manager directory
    file:
      path: "{{ ocm_config_dir }}"
      state: directory

  - name: Touch OpenShift Cluster Manager environment files
    copy:
      content: |
        {
        }
      dest: "{{ ocm_config_dir }}/{{ item }}.json"
      force: no
    loop:
    - production
    - staging
    - integration

  - name: Link default OpenShift Cluster Manager file
    file:
      src: "{{ ocm_config_dir }}/{{ ocm_default_environment }}.json"
      path: "{{ ansible_user_dir }}/.ocm.json"
      state: link

  # Powerline

  - name: Set up Powerline
    when: "'bastions' in group_names"
    block:

    - name: Add virtualenv binaries to PATH
      lineinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        line: "export PATH=\"$PATH:{{ virtualenv_root }}/bin\""
        create: yes

    - name: Install powerline-status pip package
      pip:
        name: powerline-status
        virtualenv: "{{ virtualenv_root }}"

    - name: Synchronize powerline configuration
      synchronize:
        src: config/powerline
        dest: "{{ ansible_user_dir }}/.config"

    - name: Source powerline when starting bash
      lineinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        line: "source {{ virtualenv_root }}/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh"
        create: yes

    - name: Source powerline when starting tmux
      lineinfile:
        path: "{{ ansible_user_dir }}/.tmux.conf"
        line: "source {{ virtualenv_root }}/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf"
        create: yes

  - pause:
      prompt: |

        Obtain login tokens for ocm environments:

          production  : https://cloud.redhat.com/openshift/token
                        ocm-production login --url production --token ...

          staging     : https://qaprodauth.cloud.redhat.com/openshift/token
                        ocm-staging login --url staging --token ...

          integration : https://qaprodauth.cloud.redhat.com/openshift/token?env=integration
                        ocm-integration login --url integration --token ...

      seconds: 1
